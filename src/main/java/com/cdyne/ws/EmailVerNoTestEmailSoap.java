
package com.cdyne.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EmailVerNoTestEmailSoap", targetNamespace = "http://ws.cdyne.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EmailVerNoTestEmailSoap {


    /**
     * This function will verify the domains DNS (MX) mail entries.  If the function returns 0 the persons email domain is invalid.  More than 0 will indicate there is mail servers to accept an email.  This function is great for quick email domain verification.  It is not as powerful as the other email routines.  Use a LicenseKey of 0 for testing.  A -9999 as a result means that you have tested to many emails.  Please try again later if you get this value.
     * 
     * @param licenseKey
     * @param email
     * @return
     *     returns int
     */
    @WebMethod(operationName = "VerifyMXRecord", action = "http://ws.cdyne.com/VerifyMXRecord")
    @WebResult(name = "VerifyMXRecordResult", targetNamespace = "http://ws.cdyne.com/")
    @RequestWrapper(localName = "VerifyMXRecord", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.VerifyMXRecord")
    @ResponseWrapper(localName = "VerifyMXRecordResponse", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.VerifyMXRecordResponse")
    public int verifyMXRecord(
        @WebParam(name = "email", targetNamespace = "http://ws.cdyne.com/")
        String email,
        @WebParam(name = "LicenseKey", targetNamespace = "http://ws.cdyne.com/")
        String licenseKey);

    /**
     * This function will verify an email address and also includes the ability to timeout the verification process.  The Verification can be slowed down by the email server being verified against. <b>Timeout is in seconds</b> Use a licensekey of 0 for testing <br> NOTE: A timeout error (7) does not mean an email will not go through.  You should treat this as a good email address.
     * 
     * @param licenseKey
     * @param email
     * @param timeout
     * @return
     *     returns com.cdyne.ws.ReturnIndicator
     */
    @WebMethod(operationName = "AdvancedVerifyEmail", action = "http://ws.cdyne.com/AdvancedVerifyEmail")
    @WebResult(name = "AdvancedVerifyEmailResult", targetNamespace = "http://ws.cdyne.com/")
    @RequestWrapper(localName = "AdvancedVerifyEmail", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.AdvancedVerifyEmail")
    @ResponseWrapper(localName = "AdvancedVerifyEmailResponse", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.AdvancedVerifyEmailResponse")
    public ReturnIndicator advancedVerifyEmail(
        @WebParam(name = "email", targetNamespace = "http://ws.cdyne.com/")
        String email,
        @WebParam(name = "timeout", targetNamespace = "http://ws.cdyne.com/")
        int timeout,
        @WebParam(name = "LicenseKey", targetNamespace = "http://ws.cdyne.com/")
        String licenseKey);

    /**
     * This function allows you to verify an email address against the mail servers it belongs to.  This function differs from the advanced function only by it automatically setting a timeout of 5 seconds
     * 
     * @param licenseKey
     * @param email
     * @return
     *     returns com.cdyne.ws.ReturnIndicator
     */
    @WebMethod(operationName = "VerifyEmail", action = "http://ws.cdyne.com/VerifyEmail")
    @WebResult(name = "VerifyEmailResult", targetNamespace = "http://ws.cdyne.com/")
    @RequestWrapper(localName = "VerifyEmail", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.VerifyEmail")
    @ResponseWrapper(localName = "VerifyEmailResponse", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.VerifyEmailResponse")
    public ReturnIndicator verifyEmail(
        @WebParam(name = "email", targetNamespace = "http://ws.cdyne.com/")
        String email,
        @WebParam(name = "LicenseKey", targetNamespace = "http://ws.cdyne.com/")
        String licenseKey);

    /**
     * This function will give you all the possible code returns
     * 
     * @return
     *     returns com.cdyne.ws.ArrayOfAnyType
     */
    @WebMethod(operationName = "ReturnCodes", action = "http://ws.cdyne.com/ReturnCodes")
    @WebResult(name = "ReturnCodesResult", targetNamespace = "http://ws.cdyne.com/")
    @RequestWrapper(localName = "ReturnCodes", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.ReturnCodes")
    @ResponseWrapper(localName = "ReturnCodesResponse", targetNamespace = "http://ws.cdyne.com/", className = "com.cdyne.ws.ReturnCodesResponse")
    public ArrayOfAnyType returnCodes();

}
